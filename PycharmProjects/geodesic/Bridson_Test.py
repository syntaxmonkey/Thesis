# https://scikit-image.org/docs/dev/api/skimage.feature.html#skimage.feature.structure_tensor

# Tutorial on structure tensor: https://www.mathworks.com/matlabcentral/fileexchange/12362-structure-tensor-introduction-and-tutorial

# Tensor Structure testg
# import Bridson_Common

print("Test")

if False:
	from skimage.feature import structure_tensor
	from skimage.feature import structure_tensor_eigvals
	import numpy as np
	import math

	import skimage
	import matplotlib
	import matplotlib.pyplot as plt
	from PIL import Image

	from skimage import data, img_as_float
	from skimage import exposure
	from skimage.morphology import disk
	from skimage.filters import rank
	from numpy.linalg import eig

	from multiprocessing import Process, freeze_support, set_start_method, Pool
	import time
	import random

	import uuid


if False:
	square = np.ones((5, 5))
	square[2:5, 3] = 5
	square[2:5, 2] = 3

	print("Square:", square)

	Arr, Arc, Acc = structure_tensor(square, sigma=0.1)


	print(square)
	print(Arr)
	print(Arc)
	print(Acc)

	e1 = structure_tensor_eigvals(Arr, Arc, Acc)[0]
	e2 = structure_tensor_eigvals(Arr, Arc, Acc)[1]
	print("E1", e1 )
	print("E2", e2 )
	print("Structure Tensor Eigenvalue", structure_tensor_eigvals(Arr, Arc, Acc) )

	I1 = np.linalg.eig(e1)
	I2 = np.linalg.eig(e2)

	print("I1", I1)
	print("I2", I2)


	npE = np.linalg.eigvals(square)
	print("Numpy EigenValues", npE)


if False:
	image1 = '/Users/hengsun/Downloads/larry-ferreira-9Rs5eop48KQ-unsplash.jpg'
	image = skimage.io.imread(image1)

	greyscaleImage = Image.fromarray(image).convert('L')
	plt.figure()
	plt.imshow(image)
	plt.figure()
	plt.imshow(greyscaleImage)

	image = skimage.io.imread(image1)
	# skimage = skimage.color.rgb2lab(image)
	# plt.figure()
	# plt.imshow(skimage)

	skimageGrey = skimage.color.rgb2grey(image)
	plt.figure()
	plt.imshow(skimageGrey)


	plt.show()

if False:

	matplotlib.rcParams['font.size'] = 8


	def plot_img_and_hist(image, axes, bins=256):
		"""Plot an image along with its histogram and cumulative histogram.

		"""
		image = img_as_float(image)
		ax_img, ax_hist = axes
		ax_cdf = ax_hist.twinx()

		# Display image
		ax_img.imshow(image, cmap=plt.cm.gray)
		ax_img.set_axis_off()

		# Display histogram
		ax_hist.hist(image.ravel(), bins=bins, histtype='step', color='black')
		ax_hist.ticklabel_format(axis='y', style='scientific', scilimits=(0, 0))
		ax_hist.set_xlabel('Pixel intensity')
		ax_hist.set_xlim(0, 1)
		ax_hist.set_yticks([])

		# Display cumulative distribution
		img_cdf, bins = exposure.cumulative_distribution(image, bins)
		ax_cdf.plot(bins, img_cdf, 'r')
		ax_cdf.set_yticks([])

		return ax_img, ax_hist, ax_cdf


	# Load an example image
	img = data.moon()
	# img = np.array( Image.fromarray(img).convert('L') )
	# img = np.asarray( img )

	# Contrast stretching
	p2, p98 = np.percentile(img, (2, 98))
	img_rescale = exposure.rescale_intensity(img, in_range=(p2, p98))

	# Equalization
	img_eq = exposure.equalize_hist(img)

	print("Type:", type(img))
	print("Shape:", np.shape(img))
	# Adaptive Equalization
	img_adapteq = exposure.equalize_adapthist(img, clip_limit=0.03)
	img_adapteq2 = exposure.equalize_adapthist(img)
	plt.figure()
	plt.imshow(img)
	plt.title("Original")

	plt.figure()
	plt.imshow(img_eq)
	plt.title("Euqalize Histogram")

	img_eq_median = skimage.filters.median(img_eq)
	plt.figure()
	plt.imshow(img_eq_median)
	plt.title("Euqalize Histogram Median")

	plt.figure()
	plt.imshow(img_adapteq)
	plt.title("Euqalize Adaptive Histogram")

	plt.figure()
	plt.imshow(img_adapteq2)
	plt.title("Euqalize Adaptive Histogram 2")
	img_median = skimage.filters.median( img_adapteq2 )


	plt.figure()
	plt.imshow(img_median)
	plt.title("Euqalize Adaptive Histogram 2 median")



	print(skimage.__version__)

	# Equalization
	# selem = disk(30)
	# img_loc_eq = rank.equalize(img, selem=selem)
	# plt.figure()
	# plt.imshow(img_loc_eq)
	# plt.title("Local Equalize")


	# img_meijering = skimage.filters.meijering( img_adapteq2 )
	# plt.figure()
	# plt.imshow( img_meijering )
	# plt.title("Adaptive Histogram 2 meijering")
	# #
	# # Display results
	# fig = plt.figure(figsize=(8, 5))
	# axes = np.zeros((2, 4), dtype=np.object)
	# axes[0, 0] = fig.add_subplot(2, 4, 1)
	# for i in range(1, 4):
	# 	axes[0, i] = fig.add_subplot(2, 4, 1 + i, sharex=axes[0, 0], sharey=axes[0, 0])
	# for i in range(0, 4):
	# 	axes[1, i] = fig.add_subplot(2, 4, 5 + i)
	#
	# ax_img, ax_hist, ax_cdf = plot_img_and_hist(img, axes[:, 0])
	# ax_img.set_title('Low contrast image')
	#
	# y_min, y_max = ax_hist.get_ylim()
	# ax_hist.set_ylabel('Number of pixels')
	# ax_hist.set_yticks(np.linspace(0, y_max, 5))
	#
	# ax_img, ax_hist, ax_cdf = plot_img_and_hist(img_rescale, axes[:, 1])
	# ax_img.set_title('Contrast stretching')
	#
	# ax_img, ax_hist, ax_cdf = plot_img_and_hist(img_eq, axes[:, 2])
	# ax_img.set_title('Histogram equalization')
	#
	# ax_img, ax_hist, ax_cdf = plot_img_and_hist(img_adapteq, axes[:, 3])
	# ax_img.set_title('Adaptive equalization')
	#
	# ax_cdf.set_ylabel('Fraction of total intensity')
	# ax_cdf.set_yticks(np.linspace(0, 1, 5))
	#
	# # prevent overlap of y-axis labels
	# fig.tight_layout()
	plt.show()

external = 'name'

if False:
	def f():
		time.sleep( random.random()*5 + 2 )
		print('hello,', external)

	def wrapper(name, secondName):
		global external
		print(name)
		external=secondName
		f()

	with Pool(processes=4) as pool:
		names = [('bob', 'john'), ('mack', 'another')]
		pool.starmap(wrapper, names)

if False:
	unique_filename = str(uuid.uuid4().hex)
	print(unique_filename)

	# for name in ['bob', 'john', 'mack']:
	# 	# freeze_support()
	# 	# set_start_method('spawn')
	# 	external = name
	# 	p = Process(target=f)
	# 	p.start()
	# 	# p.join()

	# p = Pool(5)
	# p.map(f, ['bob', 'john', 'mack'])

# print("Coherency:", np.power((I1 - I2) / (I1+I2), 2) )
# array([[0., 0., 0., 0., 0.],
#        [0., 1., 0., 1., 0.],
#        [0., 4., 0., 4., 0.],
#        [0., 1., 0., 1., 0.],
#        [0., 0., 0., 0., 0.]])


# import math

# intensityValues = [255, 200, 128, 100, 50, 30, 10, 1,0]
# for intensity in intensityValues:
# 	print("Intensity:", intensity, "produces", math.exp(intensity/50))



# Utilize colormath to compare two different colours.

if False:
	from colormath.color_objects import sRGBColor, LabColor
	from colormath.color_conversions import convert_color
	from colormath.color_diff import delta_e_cie2000

	rgb1 = sRGBColor(255, 255, 0, True)
	cie1 = convert_color(rgb1, LabColor)
	print(rgb1, "-->", cie1)

	rgb2 = sRGBColor(0, 255, 0, True)
	cie2 = convert_color(rgb2, LabColor)
	print(rgb2, "-->", cie2)

	rgb3 = sRGBColor(0, 0, 255, True)
	cie3 = convert_color(rgb3, LabColor)
	print(rgb3, "-->", cie3)


	print("rgb1 --> rgb2", delta_e_cie2000(cie1, cie2))
	print("rgb1 --> rgb3", delta_e_cie2000(cie1, cie3))
	print("rgb2 --> rgb3", delta_e_cie2000(cie2, cie3))

from skimage.future import graph
from skimage import data, io, segmentation, color
from matplotlib import pyplot as plt
from skimage.measure import regionprops
from skimage import draw
import numpy as np



def show_img(img):
	width = 10.0
	height = img.shape[0] * width / img.shape[1]
	f = plt.figure(figsize=(width, height))
	plt.imshow(img)



def display_edges(image, g, threshold):
	"""Draw edges of a RAG on its image

	Returns a modified image with the edges drawn.Edges are drawn in green
	and nodes are drawn in yellow.

	Parameters
	----------
	image : ndarray
		The image to be drawn on.
	g : RAG
		The Region Adjacency Graph.
	threshold : float
		Only edges in `g` below `threshold` are drawn.

	Returns:
	out: ndarray
		Image with the edges drawn.
	"""
	image = image.copy()
	# for edge in g.edges_iter():
	for edge in g.edges:
		n1, n2 = edge

		r1, c1 = map(int, rag.nodes[n1]['centroid'])
		r2, c2 = map(int, rag.nodes[n2]['centroid'])

		line = draw.line(r1, c1, r2, c2)
		circle = draw.circle(r1, c1, 2)

		if g[n1][n2]['weight'] < threshold:
			image[line] = 0, 1, 0
		image[circle] = 1, 1, 0

	return image



if False:
	img = data.coffee()
	show_img(img)

	labels = segmentation.slic(img, compactness=30, n_segments=400)
	print(labels)
	# labels = labels + 1  # So that no labelled region is 0 and ignored by regionprops
	# regions = regionprops(labels)

	label_rgb = color.label2rgb(labels, img, kind='avg')
	show_img(label_rgb)

	label_rgb = segmentation.mark_boundaries(label_rgb, labels, (0, 0, 0))
	show_img(label_rgb)

	rag = graph.rag_mean_color(img, labels)

	# print("RAG nodes", rag.nodes)  # the nodes are the regions.
	# print("RAG edges", rag.edges)  # the edges are the pairs of adjacency regions.

	plt.show()


import matplotlib.pyplot as plt
rng = np.random.RandomState(10)  # deterministic random data
# Data for SimpleTriangle
data = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1978181001292257, 0.0, 0.0, 0.1978181001292257, 1.400400533666807, 0.0, 0.0, 1.400400533666807, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1978181001292257, 1.2026015027685206, 0.5979095141731418, 0.0, 0.7957222286620632, 0.0, 0.0, 1.400400533666807, 0.1978181001292257, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2026015027685206, 0.604716886513333, 95.63961511995579, 0.0, 0.0, 0.0, 96.67554623153735, 0.7957222286620632, 0.2000531326191331, 0.1978181001292257, 97.53610566477386, 1.6095621421938056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5956745231492205, 0.0, 0.0, 1.8073472973076241, 0.0, 94.85295674670361, 1.10772905108466, 96.98163807640141, 0.3183912497601754, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5956745231492205, 97.58394280475687, 2.242945290425162, 1.8073472973076241, 96.14611171866879, 95.4700863863288, 1.2117474737048666, 0.0, 0.5956745231492205, 0.0, 0.0, 2.8384025583862647, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7893537387931056, 0.6307331773513081, 0.0, 0.0, 0.0, 92.89309566769981, 0.7893537387931056, 0.7893537387931056, 0.15900498390520146, 97.8669821673048, 0.6307331773513081, 0.6307331773513081, 0.6307331773513081, 93.54469612730239, 0.5956745231492205, 2.035114913670053, 2.8384025583862647, 1.6406418685552526, 92.74576891279166, 0.0, 2.630606761941405, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1980804108310228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9483519091545973, 0.0, 0.0, 2.630606761941405, 94.06306136607185, 93.68523236427183, 2.035114913670053, 1.1980804108310228, 96.26572933458151, 1.0002758789864203, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1978181001292257, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5956745231492205, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.47248886883988045, 0.0, 0.9483519091545973, 97.87262396752007, 0.9483519091545973, 0.9483519091545973, 0.0, 0.0, 0.0, 0.0, 0.0, 98.13770760166841, 0.47248886883988045, 0.47248886883988045, 0.47248886883988045, 89.88969487099043, 0.0, 0.0, 0.0, 0.1978181001292257, 1.405695274592769, 99.64496408955884, 0.5956745231492205, 3.507038169919849, 0.0, 0.0, 1.6034878502706646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.102221436932521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 96.63900232373543, 0.7893537387931056, 0.0, 0.0, 1.6034878502706646, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6034878502706646, 95.70646243370891, 0.6070208052044406, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.102221436932521, 90.16320145017316, 89.88969487099043, 2.9049597159393534, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.47248886883988045, 0.0, 0.0, 0.0, 1.1980804108310228, 0.0, 0.0, 0.0, 0.0, 0.9965225909844719, 0.7893537387931056, 96.89078814597356, 0.6322346061030641, 0.7893537387931056, 0.47248886883988045, 96.9769064145407, 0.47248886883988045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9965225909844719, 0.0, 0.0, 1.1980804108310228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1980804108310228, 96.9769064145407, 0.40545204905399723, 97.82670327051467, 0.9965225909844719, 0.6001614409956072, 95.11675432377862, 0.0, 0.0, 4.895377902481964, 0.0, 0.0, 0.47248886883988045, 0.1571236196945876, 1.5960640079470843, 6.933054131608085, 4.895377902481964, 7.0897344350234475, 0.0, 1.6034878502706646, 0.0, 0.0, 0.39637471792755136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.47248886883988045, 0.47248886883988045, 0.47248886883988045, 88.45486134002667, 96.11152764219104, 88.19909933807563, 4.895377902481964, 0.47248886883988045, 95.86350415986688, 0.39637471792755136, 0.39637471792755136, 0.19930249800771588, 1.6034878502706646, 3.1432165175540794, 1.6034878502706646, 1.6034878502706646, 5.340385631039091, 95.63204931572946, 88.19909933807563, 4.42347575019297, 95.65403039913113, 94.69496774786928, 2.1987495423109107, 86.65953514812041, 88.05307078127638, 0.0, 0.0, 0.0, 0.0, 82.13432464417504, 82.44907172364401, 82.44907172364401, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.939431410582237, 4.745332158587915, 4.745332158587915, 4.745332158587915, 0.41014945906995826, 1.8073472973076241, 1.8073472973076241, 2.267687496689373, 2.2174025622709723, 2.2174025622709723, 2.2174025622709723, 0.0, 0.0, 0.0, 0.5374345102622712, 0.0, 0.5374345102622712, 0.5374345102622712, 0.5956745231492205, 0.0, 0.0, 0.0, 0.7916142965657174, 0.5956745231492205, 0.5956745231492205, 0.5374345102622712, 0.5374345102622712, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

# Data for horse.
# data =[0.795015442506969, 1.0954361943413373, 1.129041102740479, 0.7790194336324061, 0.7652192285428259, 1.0367962071558037, 1.253131674730626, 0.4402927786879194, 0.9081389280936039, 1.2312028365002017, 0.21771903581845184, 1.147872322744021, 1.519648697808124, 1.3015062416549827, 1.2312028365001997, 0.9634570098961512, 0.508242616669928, 1.2973616599329563, 1.5196486978081278, 1.7710593873510634, 0.7991543218377104, 1.464441550803471, 1.2086018477625227, 1.1285435107386705, 2.0105000823708656, 0.508218928165495, 1.6266859928607778, 7.4179197785095905, 1.6903720447444814, 58.8299125530583, 6.625074092846694, 52.714662453785806, 3.5464681133719376, 54.549600454070095, 2.2446950950207136, 1.0750745773178838, 3.532077829920168, 0.8056328446693657, 2.081729569413507, 0.5381281102639, 1.6328787998168346, 1.5669995330569195, 0.8057960391645465, 1.7391664067644816, 0.9772738039287255, 2.0777442684124146, 0.6435840068500098, 2.1944219589206395, 1.525084953196466, 0.9420625058898416, 0.9510091809431382, 3.2367535665497265, 2.0038559475368056, 1.5902787840296455, 1.0485398556079641, 0.21771903581845184, 2.3056532394524414, 1.7007623996901902, 2.2030884855454165, 2.525457209271626, 1.2312028365002017, 2.4027640580874308, 2.9863833423127497, 1.1558365044304966, 0.22185756898223935, 0.4446443695774594, 0.22185756898223935, 0.9953112013629025, 1.3675645066473385, 1.4848856561075738, 2.186416630664288, 3.3531320587614237, 0.48149869861469724, 3.7057578642556375, 2.015490986614004, 3.239177455045409, 0.5340026731920523, 2.3991372983518193, 57.93198116507098, 2.4641732178476423, 54.48551820700546, 1.1925470121626183, 0.4893594261504566, 0.4949217523458008, 1.9125436337251993, 1.2210918585565917, 2.506293501878083, 1.5480516656907766, 54.09827093725858, 4.675041046029514, 2.9386589488849215, 1.3408729204368715, 5.602331609229222, 57.393102910576104, 0.22278807004199763, 0.7822546147224854, 3.29401585573111, 2.5344043307413147, 2.2846401051400345, 0.22278807004199774, 0.6178058852849443, 1.3656706566798762, 1.7539776298988008, 1.9065287689920163, 1.2119951935005655, 2.30258597975133, 1.4114411523113817, 54.12192245919962, 47.5550865698071, 0.8247095505309217, 0.995993411266206, 0.4405206217554861, 0.7901685769655069, 1.1208219206991084, 1.298072946993178, 1.1178219828713851, 1.0560445854275389, 1.904998191278592, 1.5342773665486553, 1.8322800312177832, 1.4706562347434384, 1.450601802950683, 1.4676200239663837, 1.2223682424361675, 1.8280398617119389, 1.178917869988298, 42.41205343486391, 1.2143602464223657, 0.9525275534346369, 59.46694548187752, 1.3312532075358763, 0.45074376340107325, 0.7863530498529672, 2.188553185115669, 2.5972278887915343, 3.6350268116771836, 63.13191912047228, 62.88080706153795, 58.493522688877356, 58.930162090289365, 0.9542862534076239, 1.882261408815722, 1.341265824230434, 3.8823340787589853, 2.407460601060908, 5.358594267040693, 1.644479291310468, 1.8943036554218453, 2.088741611415196, 0.4484945116093349, 0.826937871910938, 46.73522317760874, 40.78571319334004, 45.89779440382658, 1.70539863154923, 0.5152036976890316, 1.2518714536503919, 0.9455461283069325, 0.45118585749978085, 0.6800503691031545, 41.302681702167376, 53.68492145986837, 0.9948044776509566, 53.442087184765434, 0.4865070930650199, 1.7554213159340617, 1.088984819994601, 0.7808072928336905, 1.2866435123792508, 59.26463663833739, 2.654062510412641, 4.017754710489843, 53.15072421646103, 3.4557719860877407, 2.479639598273294, 3.495466281298089, 1.7287517388202376, 1.7571894068129845, 1.9297450054017502, 1.9297450054017502, 0.47216174339383626, 2.266110562413902, 0.9862589477481387, 0.466553298465384, 1.9475669128874231, 0.4835257890784864, 0.9765376781726575, 6.576247043413784, 4.232017274566195, 1.031060537206173, 14.90371558135915, 2.08044712275936, 1.4851135566332176, 0.6010673320687371, 0.9302956653458953, 0.8992569725518661, 0.8866163440153484, 5.158749040523171, 10.803920718403516, 4.043791109450384, 2.0648031891471557, 1.0422874056723646, 5.1928722095441255, 3.665147221481857, 3.100897510451393, 0.5456788901150235, 7.8027707329850555, 2.048107777444507, 0.49782598830856656, 0.7925458380813071, 1.332190530159502, 0.8077189760397284, 0.9828462813825252, 3.549975718662298, 1.7945534446882165, 0.9111367951808684, 1.1398316148718999, 2.3342909562361056, 2.4529589921814083, 0.7365629540731424, 53.51781068265369, 1.7096002105520216, 6.6443049866114325, 2.106565890488361, 2.172916454207826, 46.83369206877029, 3.0080064053970195, 8.277615922515057, 18.934421631117186, 2.4096643379685174, 47.925656793710985, 5.448808100088877, 12.589269406500406, 16.790596012763064, 15.962700840050914, 27.09996620480603, 16.489275187052073, 0.9152103431501241, 0.9152103431501241, 0.4143073425301962, 0.0, 1.09706947203907, 3.4851310969405036, 15.087677929574367, 3.8043241632890537, 5.837087180423239, 3.767238195322047, 0.614083983336743, 0.4143073425301962, 3.4225533975567144, 15.132730130641256, 2.589854602413996, 14.666788724112063, 1.8203348858939632, 3.100817491737067, 2.31746876739211, 14.39749030840018, 0.0, 3.358206305837033, 7.0512993855803945, 4.66314699786249, 7.091515426402856, 8.115206302211782, 3.6944558746160756, 11.89650596486005, 12.140245634962724, 14.473815050367177, 16.00483320580562, 6.045091214976019, 7.731499210440116, 1.7280602505633884, 0.4540309423164262, 21.52771472767705, 17.02827960783618, 6.308371230604508, 17.45269916965393, 3.4842617735800894, 7.0512993855803945, 6.2328627265694285, 26.886379408588663, 2.152447501716767, 17.440143800342923, 35.01020967593723, 14.249732147543497, 18.0673897967668, 1.5894621833596443, 4.1138184780778335, 6.901681032471346, 35.90296516756862, 12.126978653428187, 33.11314868008254, 11.756463475444198, 3.719165482812666, 15.044755330267279, 6.887231749946345, 8.136154890767648, 40.175859732722415, 36.3342582162878, 8.874211763359208, 4.280382992022026, 3.5267177060338772, 2.3785953501531054, 4.9562313153395285, 3.3481340964596082, 2.415848529317322, 1.5537890576395532, 3.5857644546896212, 3.0594445681613256, 1.0232912988000638, 17.90437881752422, 3.1770369643124563, 31.15524942562704, 13.833260967175065, 3.6047124383670663, 15.516329871408601, 16.84760601440855, 1.6300223099969327, 2.0127112716375373, 11.36275456559937, 11.957293950131728, 15.546394750299418, 21.24792484013736, 32.593851112825995, 2.951035462420703, 15.692851674833719, 39.26957483727854, 44.645260124235975, 4.0699524781818965, 41.471490700197975, 1.7699490023185012, 6.033262101850122, 3.8611936189858937, 0.6881645980204084, 2.6839637228012894, 1.9724995297090526, 4.599149548247692, 4.404866226146947, 4.45778602768184, 1.9620399361087386, 1.7928516890490807, 31.737606597319786, 11.814690070586796, 22.515950144248237, 29.482770666499025, 0.9661063401563355, 3.1775088924078227, 3.9029320577571913, 11.468348614516003, 0.8195231899196279, 1.3903046739425018, 1.984388292153975, 4.8573153327985255, 25.012274512030306, 22.990552732697285, 12.09605176696917, 35.6701938771178, 2.0898774650409586, 37.79558011727702, 6.255152928127483, 5.962141023358884, 5.319803359203064, 33.233681418285705, 4.761754533134629, 4.665199235375648, 4.498875951309313, 3.435725643450158, 1.64669576136282, 3.599194394428635, 6.105487525047099, 20.522624223461584, 2.379502417826119, 5.322528833622452, 3.29413413590507, 3.244201644627737, 23.75938614389474, 41.47358981942051, 0.8786924290293802, 1.150944576504739, 1.3996881931581608, 20.08779818318567, 28.385594017004525, 29.865271810214608, 3.3526016802549097, 26.588090432512157, 29.914224449308865, 23.70430221082901, 26.330226609627537, 24.40300797983947, 22.224329831603303, 31.341418105585785, 40.80978404827322, 38.93320857612114, 28.48433875503336, 35.48411751775513, 34.849740560085856, 34.30856297182002, 32.72318974467765, 3.9723176735263332, 8.313086197743544, 22.54860698481833, 23.2677861934301, 0.7297022885554904, 3.493199639960381, 6.173652032563516, 6.600271709076931, 0.7759009176711076, 0.4580314913529325, 1.5157256492749178, 3.033421902171276, 2.51857203822585, 4.553569665046212, 1.605128860184313, 25.491869677735377, 24.796071757180908, 26.779602831844674, 25.421488658400776, 0.9269932376083645, 1.8764169253713086, 6.291793121655651, 17.29215002841283, 2.905849483691071, 8.233396439349397, 7.91061673444974, 7.3463352615737945, 4.170574908167482, 5.298952195321813, 5.774490244475911, 1.475513567496102, 12.374168386565282, 1.251889711558566, 11.040422355799196, 27.35475772045331, 1.385651416040807, 2.2673867719203282, 4.20517256120279, 17.997771280102356, 22.870617619886232, 4.578119907248225, 1.3683484869894345, 7.688003680328573, 23.028006419920125, 22.208367855784463, 13.679030156614179, 6.351122380278155, 10.999510579542381, 0.5884588935001928, 0.5814945146589732, 26.03934948797211, 25.958225861320162, 3.245863960482307, 27.363583636093566, 25.78296295241788, 25.718930486594324, 3.5495041164964993, 31.469524744630572, 26.677079571676114, 26.433149435281447, 2.6914833083332743, 1.2990602416567936, 7.423917349796174, 5.6704391681344575, 29.907156816139214, 25.55052880953131, 24.598210438022758, 3.49072514969068, 5.099001553039389, 20.226490821933528, 18.834698796675717, 17.925602053941162, 18.421369561245076, 0.9820894562988052, 8.312230220467614, 1.0344763591628263, 7.604003038647918, 8.388255858389787, 18.56479760423098, 22.22341837317566, 22.98925991514454, 7.27354574749608, 5.199651670929979, 11.005666329053863, 7.673855921506263, 12.579307682687746, 1.069327795223993, 9.074081744103161, 11.607047287073017, 7.584229971606898, 12.489575699158527, 3.6187836634596144, 2.1042202543203725, 4.051900239542921, 3.1599716435702723, 1.6353310960866374, 2.8365923644591455, 12.068584186902402, 0.8301115204750525, 5.074890676741468, 1.9861585247864086, 9.719472515293642, 2.3737287241883887, 11.176945114988266, 1.8645708847884999, 15.159300576986958, 9.48972955528337, 16.668146387217647, 5.2070472387170295, 10.44166945074396, 3.8726784149722002]


if False:
	for percentile in range(0, 101, 10):
		print("Percentile", percentile, ":", np.percentile(data, percentile))
	# Data for chair
	data = [0.7188256588794233, 0.520542396835039, 0.7188256588794233, 1.1147644403378394, 0.5222622143159197, 0.0, 1.0196537007290802, 0.6740745594915782, 9.48726254128632, 0.9000931777558568, 1.9427915389205228, 10.058927418245158, 0.2482495486416341, 1.8666178554473387, 18.210847973991733, 0.4930297585628451, 10.911891905629913, 18.317974162446735, 0.4884787196845783, 3.8594341203337965, 11.093180383834998, 0.4840122838702023, 4.08303010212594, 3.2630808118692376, 0.240357816176528, 0.24145385531751973, 3.489036323922674, 0.23927183010028158, 0.0, 0.48181003170397113, 0.240357816176528, 0.23927183010028155, 0.23927183010028155, 0.23927183010028155, 0.240357816176528, 0.240357816176528, 0.0, 0.24145385531751973, 0.0, 0.4840122838702023, 0.24145385531751973, 0.48623508006288707, 0.2425600926605629, 8.261201594625213, 16.132856767948226, 65.28255474848254, 0.0, 0.240357816176528, 0.240357816176528, 0.2436766763613869, 0.0, 0.4907435084471001, 0.240357816176528, 0.24145385531751973, 0.0, 8.818477650117144, 0.5222622143159197, 0.0, 0.9072694226572358, 6.954876868548751, 39.042230813791065, 42.23102374839092, 3.3695319984730085, 0.2414538553175197, 0.0, 7.342873710913215, 53.28614754163631, 37.34234843184811, 0.240357816176528, 0.240357816176528, 0.48181003170397113, 50.77481970216067, 46.93866994714095, 50.75152692819958, 50.352419198800995, 55.16949295906098, 8.818477650117144, 55.4173753339004, 8.140705344368904, 3.369531998473008, 40.018699984580095, 0.6693599548894197, 0.24256009266056291, 0.24367667636138687, 0.24367667636138687, 0.7932102599621488, 0.5301336630813795, 0.2670801768142338, 0.0, 0.24145385531751973, 0.24145385531751973, 0.24145385531751973, 0.24145385531751973, 0.2414538553175197, 0.48623508006288707, 0.2425600926605629, 0.2630832760233066, 0.5222622143159197, 0.24145385531751973, 0.4840122838702023, 0.46060564267253484, 0.9503569916085137, 0.4907435084471001, 0.0, 0.4907435084471001, 3.8027439279591913, 0.0, 0.48623508006288707, 0.0, 0.24709003435794108, 0.0, 0.2425600926605629, 0.2425600926605629, 0.48623508006288707, 0.2425600926605629, 0.2436766763613869, 0.4907435084471001, 0.24480375768406715, 0.785338998335669, 0.7972070048185056, 0.5301336630813795, 0.5517274385617227, 0.6855745467379538, 3.5475573671634137, 14.056668964340567, 3.1799804696781306, 1.9091518595606343, 0.7859327240150668, 1.4019798143927469, 0.25638605557605515, 0.37082225324024726, 0.4584979145925875, 0.5301130586806329, 3.6863248860055635, 39.652001206013665, 15.117983258654526, 38.08640552276625, 12.210462286234355, 11.515635909581496, 3.5676320531029337, 1.4495208903058097, 0.0, 0.4884787196845783, 0.24367667636138687, 0.2670801768142338, 0.26844040131999886, 0.24480375768406715, 0.2436766763613869, 4.817972504928401, 65.09683285868226, 1.0606065987463362, 59.22109790760814, 0.5418379331039288, 0.24367667636138687, 0.4884787196845783, 0.4884787196845783, 0.9433883044664652, 3.917959545363882, 5.080050133466257, 0.9843710211359453, 0.23539151902380043, 0.5834737348975033, 0.7142787245028872, 4.978340125994221, 4.926548367787274, 0.24709003435794108, 0.24594149109441613, 0.24709003435794108, 0.4953377889444657, 0.6261109554826843, 0.402814974481799, 0.24824954864163407, 0.49766792541340454, 0.0, 4.692707671024533, 0.4930297585628451, 0.4930297585628451, 53.39285507985174, 5.6649945930832635, 5.6135381843845, 4.978860518145091, 53.30333607840032, 0.5355182458831828, 3.838442785391981, 0.0, 0.24480375768406712, 0.4930297585628451, 0.24594149109441615, 0.4907435084471001, 0.24480375768406715, 4.4705121916252155, 60.17366488902691, 1.202189630310696, 0.4930297585628451, 0.24594149109441615, 0.4930297585628451, 0.5355182458831828, 0.0, 0.26844040131999886, 0.5860546115656062, 1.0251682315614503, 3.3773249537046093, 0.11622878728333318, 0.8047310312254061, 1.7495460627770676, 0.8330559391442044, 0.24709003435794108, 0.24824954864163407, 1.6927487838440671, 0.7482645557031299, 0.24709003435794108, 1.8698029318833167, 0.08339880190980195, 0.8846901227241636, 0.2494201986207723, 0.2494201986207723, 0.5000205009179823, 2.064847975022854, 2.81879103591148, 0.8834644232034996, 0.8319085211476662, 59.23715553552721, 3.8384427853919827, 53.33312928029521, 2.214823597998638, 5.570984809011363, 3.6635981862744975, 0.0, 4.3055322982408, 2.8866168863898465, 4.879596257730524, 0.0, 0.7553908225295173, 0.0, 2.8866168863898465, 2.8866168863898465, 1.6927487838440671, 7.118404501486698, 0.5355182458831828, 1.7166961821862428, 59.945528282311784, 0.25262294866420193, 13.073344433822545, 10.954312556024814, 1.080084728340063, 52.458418619830965, 0.250602152590272, 0.7553908225295173, 1.3037735015154053, 5.465066886500019, 67.96880688780611, 2.4889279129052073, 0.26844040131999886, 1.449615004970545, 0.5410167371953428, 2.010960574942388, 4.214712090192449, 63.44574598648593, 0.5047943378396768, 3.48021917706824, 0.7590061274135058, 0.783467443384833, 0.9995186453031507, 8.978321420496602, 23.82352246317491, 10.801335149139694, 9.464017098680639, 2.602156074763433, 23.60253109751276, 23.31523393812331, 55.86451169825867, 22.02030860749974, 26.2052268139306, 52.00174179215073, 60.78263343814465, 0.5328119548555378, 0.8094499735551277, 60.73087533848421, 58.17048937374662, 1.352572383594927, 47.68027149137701, 1.6877727103680482, 0.546712432948005, 0.2542175781724502, 0.509662114768685, 3.8838267911564137, 6.39290306468961, 12.717313168205793, 12.612728882550238, 12.416850488067741, 1.3422267346494334, 1.0594587265444733, 1.6154281598446056, 1.0482307893801592, 1.5306840814824358, 9.771857947572407, 9.513354303357412, 16.902654615807904, 8.222924664390366, 15.123518847573713, 7.183905565408807, 64.07109795212382, 4.478263688833574, 24.476100989012725, 65.66642828535947, 1.2768581200942755, 58.71394841538025, 6.095541807800422, 2.9952121342915428, 2.916484889578635, 46.25179579269265, 2.75900834860567, 10.580891205434446, 11.114854480539513, 8.423009690761987, 55.39957108407824, 57.5056609356786, 48.09488502827486, 46.99803939816558, 3.0503791047868387, 0.2554465076453958, 0.7661528049570299, 0.6030183247817089, 0.7738278969039134, 1.0734987997317913, 1.8183382948917624, 1.3798933940923348, 0.7400369948251259, 0.728036644710564, 56.824796305830226, 60.38417892414505, 64.86646073036437, 56.555391851272404, 1.2119991232874163, 1.5020009076433893, 58.67872580515705, 42.58647480937262, 60.576532967128415, 42.949357926531526, 21.72998048363946, 57.203225229347886, 60.24713137480145, 1.2912412561369415, 2.162777683474838, 1.4451524614044584, 1.3360597828613285, 44.11052414583457, 2.165062663963454, 0.4894437077142961, 51.76544138172075, 2.3789965649522373, 2.8965151347002593, 2.708023151757708, 0.6953573973226319, 0.5177172639465104, 0.8906799987746876, 1.4200304284212053, 43.21452452034369, 4.3313187970384055, 50.25621488001465, 49.12477797831608, 8.15603493332355, 0.2604862156253587, 0.5222622143159197, 7.585135841467604, 46.954424276450794, 1.4836261973985672, 1.4272574454987108, 37.680275527607634, 47.590168652708684, 6.343272705973566, 4.250505294243045, 9.139158538128976, 14.010998191418206, 4.730832530319049, 4.602067574481507, 0.5585036858284577, 38.34514784739433, 0.2607761333005055, 0.60756333739073, 13.391640131271522, 17.45452037027145, 17.45452037027145, 5.912373987654348, 17.45452037027145, 3.085242217277094, 6.22581396805607, 4.973589689346201, 1.9621794154261643, 45.80638174768673, 0.5699391952634802, 1.3567056724997235, 5.483532401749724, 3.0743379523474794, 42.99073506250613, 40.258874665609206, 35.97434496810421, 2.0164460371731217, 0.273776873486258, 4.1238045658719225, 8.415912298330555, 44.877021279437756, 4.28784617631335, 5.486284243597699, 0.2617781384665252, 0.5219694508621475, 1.103865320853801, 0.5248592382758431, 2.010233669335273, 0.25977967334330665, 0.25977967334330665, 0.25977967334330665, 0.2630832760233066, 1.284547684508782, 22.28110905263254, 1.284547684508782, 38.36897550327643, 38.14792322333757, 8.825898241229154, 0.5223495083608517, 0.6088594047779526, 0.0, 29.402036007488032, 0.518285253876428, 1.417260007743027, 0.0, 2.8630256193442096, 38.04475707122325, 2.596016602749172, 9.774026504877973, 0.0, 0.0, 0.518285253876428, 46.166413721675355, 40.258228186530346, 4.116652744095387, 0.518285253876428, 0.518285253876428, 4.245209753700372, 1.1990864919787974, 11.373390023758583, 5.058905291856304, 34.12244625974046, 7.245350956745649, 9.66834023055302, 22.281109052632537, 21.61179983283428, 22.196594513600306, 5.548857924397637, 29.186951624340914, 0.26236257677348557, 0.7912083267440072, 0.6386139307317005, 0.518285253876428, 0.6062804972279933, 27.77898147059186, 1.4172600077430282, 1.8273421435881079, 40.344812284073235, 0.7695560493175385, 1.0519577134686702, 1.045863291470411, 0.7935406268004319, 10.24227656170318, 35.5092216682406, 10.682070717047745, 0.2630832760233066, 0.5225021671118502, 0.6899546467151295, 26.798317120586045, 29.63951635901508, 10.744810047962856, 29.830176080747144, 29.801675181399975, 8.37094251168052, 2.4559649933597267, 1.1033130369266457, 28.309996296230924, 0.0, 0.5678097196293656, 1.114877060690115, 37.792890456886866, 7.4891661575375315, 18.14016470642719, 27.210228497953235, 25.726189065522632, 0.5569093829888819, 0.5678097196293656, 11.954788551240545, 31.661814302774292, 0.47689198723936227, 2.206129747296467, 0.9161524500654353, 0.25957751036993526, 26.270170072176484, 39.96625313912472, 27.723122580111976, 2.3778103420836825, 0.511062461946436, 28.040024334462192, 37.708276271728586, 27.408432032345615, 0.9127822889872615, 37.32770757012106, 17.786076125462607, 7.9363981364959235]
	# data = np.random.normal(0, 20, 1000)

	data = [0.06149435657025543, 0.06630035455903768, 0.07314618216632471, 0.05696486636060121, 0.04548556836301874, 0.02656170540811049, 0.03647643623296617, 0.06027979574522821, 0.0465645482451772, 0.043549827653820254, 0.02351980901491494, 0.015344795497342288, 0.00976463558738843, 0.03804797791077659, 0.07716438125928132, 0.04971320238063263, 0.06177794047534885, 0.11124592555706944, 0.05556083035142766, 0.4215704139696159, 0.0862992298624199, 0.10595872533703454, 0.10149077280565513, 0.08748312097859465, 0.03414942666128658, 0.029463558880538632, 0.07046028085499548, 0.02433054776816499, 0.043546012087388584, 0.07072707591093688, 0.14411299211854997, 0.10299004802561101, 0.09114317391775849, 0.12696719257547315, 0.01026316993766591, 0.045162486039973714, 0.047852478350493756, 0.037405809235525216, 0.027357664523406326, 0.08436018233237642, 0.021862377717406793, 0.05004522566460105, 0.17648386242006245, 0.03703514593359136, 0.039881058980700254, 0.03620868014630564, 0.017816156486066496, 0.012653580990435658, 0.039710831397931246, 0.029267126752452622, 0.04038106992179596, 0.01548773427427022, 0.06827231562571873, 0.01681079355703728, 0.019108617144558457, 0.04282425769619914, 0.047858665216024485, 0.05381324851501183, 0.06616273049190599, 0.06041366269379799, 0.11841314650438833, 0.12183100664827352, 0.12741024747263732, 0.1010476357794124, 0.0476187616034731, 0.11904783733582217, 0.017313597333438836, 1e-11, 0.01908304893751827, 0.23816488485003282, 0.004682836601939391, 0.02169377060589631, 0.12684605467593554, 0.028893888266594444, 0.021210892321199635, 0.06809315164808195, 0.02299763306181522, 0.06296851574212893, 1e-11, 0.016815059662285553, 0.011848496992186939, 0.019367271456009163, 1e-11, 0.03521219863711762, 0.04910712118286116, 0.04685342501094683, 0.073333153122331, 0.12228747125637622, 0.03426477346453287, 0.05116675398411229, 0.116110464620961, 1e-11, 0.029312947123487098, 0.2177559755580109, 0.14481334284804737, 0.005141896583148829, 0.16676457502863642, 0.02171561246969698, 0.10785781666550653, 0.07521428217393683, 0.07311407323642398, 1e-11, 0.10671874212690702, 1e-11, 1e-11, 0.017313587332414965, 0.02216041338891509, 0.04278878582820355, 0.036347426573160826, 0.12250424573510867, 0.1228878648233487, 0.0658617121470244, 0.05579591907045127, 0.006109586208236391, 1e-11, 1e-11, 1e-11, 1e-11, 0.01642038671023796, 0.010239879225110287, 0.06570760369758369, 0.4733250422543275, 0.10904996561953673, 0.12529828586036365, 0.09024410601956187, 0.015338014594520171, 0.01681501483013641, 0.01681501483013641, 0.9161851854842464, 0.016815069812556514, 0.01618221854629893, 0.016815069812556514, 0.04293245838810049, 0.06697462893280928, 0.11214449716950502, 0.09454870845847112, 0.051629036012515415, 0.08425782311035027, 0.10785398600906625, 0.10080248051449231, 0.04214068842902812, 0.07946115861652353, 0.10682648715635353, 0.06529112921848712, 0.02037390438252778, 0.0816152382037298, 0.08708391992918546, 0.08006159453976326, 0.06591630001023227, 0.033653465811919456, 0.05747463897649357, 0.0471272741121709, 0.11400216817100124, 0.08380021215038312, 0.10119034668710537, 0.06724813226014584, 0.0, 0.06519907796992071, 0.03156723708900064, 0.06295674615476929, 0.03829741219195958, 0.056943244351638125, 0.04807532725651871, 0.07634807462403252, 0.11130146169825779, 0.09064894755197245, 0.05394818062607494, 0.029671647352535677, 0.06842000851564829, 0.0704608678252631, 0.07821229621860117, 0.07821229621860117, 0.05976050746408844, 0.051629359228841466, 0.02896055898745759, 0.0623977887857355, 0.0632553186090785, 0.07190825082318505, 0.10899726388717251]

	data = np.array([255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 254.95152198421647, 255.0, 255.0, 255.0, 255.0, 197.26902654867257, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 232.83295711060947, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 254.93793472445157, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 223.56989247311827, 255.0, 255.0, 230.14897188417962, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 255.0, 0.0, 0.0, 255.0, 254.9203758654797, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 230.8811748998665, 208.37243771680858, 255.0, 0.03844473569244211, 255.0, 255.0, 255.0, 255.0, 0.0, 255.0, 0.0, 0.0, 0.0, 254.96387434554973, 254.97754491017963, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 208.3012987012987, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 27.155268667131892, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 254.98874755381604, 255.0, 255.0, 254.91504854368932, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0])
	data = 255 - data

	data = [0.021908290481613774, 0.09576808352689807, 0.0350388528948337, 0.04105007939291308, 0.09387961608947001, 0.05284958587276164, 0.08061884087603866, 0.012148429660502058, 0.029982426427113237, 0.03598724237360144, 0.04423509101288493, 0.020755642184050103, 0.10070735756319531, 0.06675210975744907, 0.045558364012821914, 0.015476222300264894, 0.07317277386327088, 0.08973495447990694, 0.061693509963344766, 0.017984397855494386, 0.0069857504467031525, 0.05730681258721037, 0.11438702346960478, 0.07476464025379968, 0.06337433003411286, 0.09962643839917067, 0.04566340781512407, 0.03253138674536642, 0.01758357610980017, 0.06637433108911567, 0.014873257534336529, 0.01891344462795273, 0.09193001510041161, 0.08903796437833936, 0.03258609468266637, 0.025335018680145996, 0.08901241133405267, 0.03510167934942424, 0.09980141625206852, 0.04793449732292548, 0.043033521179503556, 0.022565986756550648, 0.0661293766494012, 0.07657306043713043, 0.09235005033553127, 0.09694498493460102, 0.01050798339593144, 0.03166014642982794, 0.02520407503092562, 0.013031190654783148, 0.036826206214474425, 0.030147771031812726, 0.051750843112014215, 0.11104495036926336, 0.107688812276235, 0.01914010988997634, 0.04027368549548349, 0.0509137715279109, 0.07445387628695317, 0.04599313841440814, 0.14072538115580524, 0.044697638724333584, 0.03179788978526715, 0.12340124020218554, 0.017799788995238038, 0.058320238935615394, 0.331695895153845, 0.17888075751543117, 0.06963542208509046, 0.07915455360827063, 0.440655906756395, 0.7157724004863036, 0.19979805832983213, 0.12467489175513845, 0.015487106584594604, 0.026514879389903566, 0.10940940387885538, 0.09696057965306325, 0.058772485145069345, 0.1478741836491365, 0.415572707184058, 0.13444993564876695, 0.13356935149222224, 0.011029305508484907, 0.1918633642146176, 0.045179000577298886, 0.06125474294276412, 0.09324344056763881, 0.5097296870232291, 0.04732569435383279, 0.01049037345886467, 0.2571590649434296, 0.36850153639658667, 0.23162735321820585, 0.14094714981575956, 0.11240649442251509, 0.17907559703865175, 0.09745453421261482, 0.4511145216941058, 0.08437228888691663, 0.12811212686779733, 0.1904353835673009, 0.3267972353286152, 0.06186258255874101, 0.27840932667650625, 0.3988736870068329, 0.13578350567635358, 0.14466053686320784, 0.2916225058537581, 0.13285445055365727, 0.26314078897573334, 0.15345820326559154, 0.18353866208100095, 0.475684598956117, 0.21720027190880417, 0.07696919788570515, 0.07654574302274933, 0.5185989676700403, 0.14454064878915376, 0.6192165189512479, 0.22792595809510152, 0.5689847274361062, 0.20702961455427182, 0.36475866929227674, 0.056769916345271634, 0.07804352743425645, 0.2278978926197983, 0.328120951054438, 0.07506061534655784, 0.07848693626500312, 0.08987227780354054, 0.21370600652163338, 0.015363305905998255, 0.19242252186821499, 0.45964478802813213, 0.3660691563774448, 0.03762185145188898, 0.0370255571859845, 0.06312260378923853, 0.03160101113336101, 0.1995937428811561, 0.06149952083782419, 0.1518975526378325, 0.055057409806056924, 0.06663573320533929, 0.31161021585284276, 0.12973653343786654, 0.05191200838779373, 0.032123400924283445, 0.058241898865643, 0.16368904346690358, 0.1337077347695084, 0.13488716862658678, 0.14513807569061182, 0.026304075689807842, 0.12401256399619823, 0.07088107161221527, 0.048720380359905606, 0.06929997224051303, 0.09141675642990124, 0.12220434405807418, 0.06758803265036217, 0.05460723443743787, 0.1439974078483979, 0.04993013257335468, 0.25333261858403167, 0.05922151604480434, 0.00857949335285347, 0.14388036193803685, 0.07302012414636767, 0.15564520579248214, 0.12655736235550352, 0.07144517464303515, 0.030409702690075393, 0.07782620716793309, 0.009455136357624268, 0.06230395650839077]

	maxValue = np.max( data )
	print("maxValue", maxValue)

	invert = lambda x: 255 - x
	print("Inversion of 255:", invert(255))
	print("Inversion of 1:", invert(1))

	hist, bin_edges = np.histogram(data, bins=10)
	print("Attraction bin:", bin_edges[1])
	print("Repel bin:", bin_edges[3])

	print("Histo:", hist, len(hist))
	print("Histo sum:", sum(hist))
	print("bin_edges:",bin_edges, len(bin_edges))



	print("First Bin:", np.percentile(data, sum(hist[0:1]) / sum(hist) ) )

	# fixed bin size
	bins = np.arange(-100, 100, 5) # fixed bin size

	# plt.xlim([min(data)-5, max(data)+5])

	plt.hist(data, bins=20)
	plt.title('Random Gaussian data (fixed bin size)')
	plt.xlabel('variable X (bin size = 5)')
	plt.ylabel('count')

	x = np.array([5, 10, 12, 20])
	y = np.array([1, 20, 2, 11])
	fig = plt.figure()
	lines = plt.plot(x, y)
	print(lines)
	lines.pop().remove()
	# for line in lines:
	# 	line.remove()
	# 	print()

	plt.show()
# plt.show()


def calculateLineWidth(intensity):
	# The line width will be a linear calculation: -0.2 * x / 255 + 0.2.  At 0, it should be 0.25 at intensity 0 and 0.05 at intensity 255.
	# Change the line thickness.  Assume minimum line thickness is 0.1.  We want the maximum line thickness to be 1.0.
	return (-1.0 * intensity / 255) + 1.001

if False:
	for i in range(256):
		print("Intensity: ", i, "has width:", calculateLineWidth(i))

# import numba
from numba import prange, njit, jit, jit_module
import numpy as np
import cProfile

# Testing the Pickle process.
# Originally from: https://stackoverflow.com/questions/4529815/saving-an-object-data-persistence
# import _pickle as pickle
# import pickle
from scipy.spatial import distance

def findClosestIndex(s1, s2):
	# print("Bridson_Common:findClosestIndex s1:", s1)
	# print("Bridson_Common:findClosestIndex s2:", s2)
	# both s1 and s2 should be 2D.

	distances = distance.cdist(s1, s2)
	print("Distances:", distances)
	# shortestDistances = distance.cdist(s1, s2).min(axis=1)
	location = np.where(distances == distances.min())
	# print('Location:', location, distances.min())
	# Return the an tuple.  Tuple[0] contains indeces in s1.  Tuple[1] contains indeces in s2.
	return location


class pairClusters:

	def __init__(self):
		pass

	def pairAll(self, s1, s2, allowDangle=False):
		self.s0 = s1
		self.s1 = s2
		# print("Bridson_Common:findClosestIndex s1:", s1)
		# print("Bridson_Common:findClosestIndex s2:", s2)
		# both s1 and s2 should be 2D.

		# Want to pair all points.
		# Iterate through all the points until everything has been paired.
		print("Original points:", s1, s2)

		firstListMoved = list(range(len(s1)))
		secondListMoved = list(range(len(s2)))

		distances = distance.cdist(s1, s2)
		allDistances = np.sort( distances.flatten() )

		print("Distances:", distances)
		# shortestDistances = distance.cdist(s1, s2).min(axis=1)
		allPairings = []
		side0Cluster = {}
		side1Cluster = {}
		clusterGroups = {}


		currentCluster = 0

		# Pass 1 - OR logic.
		for currentDistance in allDistances:
			print("Current Distance:", currentDistance)
			location = np.where(distances == currentDistance)
			print("Location:", location)
			index0 = location[0][0]
			index1 = location[1][0]
			print("Location0:", index0)
			print("Location1:", index1)


			# if firstListMoved[index0] == -1 and secondListMoved[index1] == -1:
			if firstListMoved[index0] == -1 or secondListMoved[index1] == -1:
				# The two points have already been merged.  Do nothing.
				pass
			else:
				# At least one of the points has not been merged.
				allPairings.append(location)
				firstListMoved[index0] = -1
				secondListMoved[index1] = -1
				print("Pairing:", location, " between points: ", s1[index0], s2[index1])
				# If either index already exists in a cluster
				if index0 in side0Cluster.keys():
					# Index already exists.  Get the
					existingCluster = side0Cluster[ index0 ]
				elif index1 in side1Cluster.keys():
					existingCluster = side1Cluster[ index1 ]
				else:
					# Create new cluster.
					existingCluster = currentCluster
					currentCluster += 1
				side0Cluster[ index0 ] = existingCluster
				side1Cluster[ index1 ] = existingCluster
				if not existingCluster in clusterGroups.keys():
					newList = [ (index0, index1) ]
					clusterGroups[ existingCluster ] = newList
				else:
					existingList = clusterGroups[ existingCluster ]
					existingList.append( (index0, index1) )

		print("** side0Cluster:", side0Cluster)
		print("** side1Cluster:", side1Cluster)
		print("** clusterGroups:", clusterGroups)

		if not allowDangle:
			# Pass 2 - AND logic.
			for currentDistance in allDistances:
				print("Current Distance:", currentDistance)
				location = np.where(distances == currentDistance)
				print("Location:", location)
				index0 = location[0][0]
				index1 = location[1][0]
				print("Location0:", index0)
				print("Location1:", index1)


				if firstListMoved[index0] == -1 and secondListMoved[index1] == -1:
				# if firstListMoved[index0] == -1 or secondListMoved[index1] == -1:
					# The two points have already been merged.  Do nothing.
					pass
				else:
					# At least one of the points has not been merged.
					allPairings.append(location)
					firstListMoved[index0] = -1
					secondListMoved[index1] = -1
					print("Pairing:", location, " between points: ", s1[index0], s2[index1])
					if index0 in side0Cluster.keys():
						# Index already exists.  Get the
						existingCluster = side0Cluster[ index0 ]
					elif index1 in side1Cluster.keys():
						existingCluster = side1Cluster[ index1 ]
					else:
						# Create new cluster.
						existingCluster = currentCluster
						currentCluster += 1
					side0Cluster[ index0 ] = existingCluster
					side1Cluster[ index1 ] = existingCluster
					if not existingCluster in clusterGroups.keys():
						newList = [ (index0, index1) ]
						clusterGroups[ existingCluster ] = newList
					else:
						existingList = clusterGroups[ existingCluster ]
						existingList.append( (index0, index1) )

		print("** side0Cluster:", side0Cluster)
		print("** side1Cluster:", side1Cluster)
		print("** clusterGroups:", clusterGroups)
		self.side0Cluster = side0Cluster
		self.side1Cluster = side1Cluster
		self.clusterGroups = clusterGroups

		self.allPairs = allPairings
		self.averageClusters()
		self.displayAllPairs()
		plt.title('pairALL allowDangle:'+ str(allowDangle) )


	def pairAllAND(self, s1, s2, allowDangle=False, threshold=1.5):
		self.s0 = s1
		self.s1 = s2
		# print("Bridson_Common:findClosestIndex s1:", s1)
		# print("Bridson_Common:findClosestIndex s2:", s2)
		# both s1 and s2 should be 2D.

		# Want to pair all points.
		# Iterate through all the points until everything has been paired.
		print("Original points:", s1, s2)

		firstListMoved = list(range(len(s1)))
		secondListMoved = list(range(len(s2)))

		distances = distance.cdist(s1, s2)
		allDistances = np.sort( distances.flatten() )

		print("Distances:", distances)
		# shortestDistances = distance.cdist(s1, s2).min(axis=1)
		allPairings = []
		side0Cluster = {}
		side1Cluster = {}
		clusterGroups = {}


		currentCluster = 0

		# Pass 1 - OR logic.
		for currentDistance in allDistances:
			if currentDistance > threshold:
				# If the currentDistance is greater than the threshold, skip this pairing.
				continue
			print("Current Distance:", currentDistance)
			location = np.where(distances == currentDistance)
			print("Location:", location)
			index0 = location[0][0]
			index1 = location[1][0]
			print("Location0:", index0)
			print("Location1:", index1)


			if firstListMoved[index0] == -1 and secondListMoved[index1] == -1:
			# if firstListMoved[index0] == -1 or secondListMoved[index1] == -1:
				# The two points have already been merged.  Do nothing.
				pass
			else:
				# At least one of the points has not been merged.
				allPairings.append(location)
				firstListMoved[index0] = -1
				secondListMoved[index1] = -1
				print("Pairing:", location, " between points: ", s1[index0], s2[index1])
				# If either index already exists in a cluster
				if index0 in side0Cluster.keys():
					# Index already exists.  Get the
					existingCluster = side0Cluster[ index0 ]
				elif index1 in side1Cluster.keys():
					existingCluster = side1Cluster[ index1 ]
				else:
					# Create new cluster.
					existingCluster = currentCluster
					currentCluster += 1
				side0Cluster[ index0 ] = existingCluster
				side1Cluster[ index1 ] = existingCluster
				if not existingCluster in clusterGroups.keys():
					newList = [ (index0, index1) ]
					clusterGroups[ existingCluster ] = newList
				else:
					existingList = clusterGroups[ existingCluster ]
					existingList.append( (index0, index1) )

		print("** side0Cluster:", side0Cluster)
		print("** side1Cluster:", side1Cluster)
		print("** clusterGroups:", clusterGroups)


		print("** side0Cluster:", side0Cluster)
		print("** side1Cluster:", side1Cluster)
		print("** clusterGroups:", clusterGroups)
		self.side0Cluster = side0Cluster
		self.side1Cluster = side1Cluster
		self.clusterGroups = clusterGroups

		self.allPairs = allPairings

		self.averageClusters()
		self.displayAllPairs()
		plt.title('pairAllAND')


	def pairAllOR(self, s1, s2, threshold=1.5):
		self.s0 = s1
		self.s1 = s2
		# print("Bridson_Common:findClosestIndex s1:", s1)
		# print("Bridson_Common:findClosestIndex s2:", s2)
		# both s1 and s2 should be 2D.

		# Want to pair all points.
		# Iterate through all the points until everything has been paired.
		print("Original points:", s1, s2)

		firstListMoved = list(range(len(s1)))
		secondListMoved = list(range(len(s2)))

		distances = distance.cdist(s1, s2)
		allDistances = np.sort( distances.flatten() )

		print("Distances:", distances)
		# shortestDistances = distance.cdist(s1, s2).min(axis=1)
		allPairings = []
		side0Cluster = {}
		side1Cluster = {}
		clusterGroups = {}


		currentCluster = 0

		# Pass 1 - OR logic.
		for currentDistance in allDistances:
			if currentDistance > threshold:
				continue
			print("Current Distance:", currentDistance)
			location = np.where(distances == currentDistance)
			print("Location:", location)
			index0 = location[0][0]
			index1 = location[1][0]
			print("Location0:", index0)
			print("Location1:", index1)


			# if firstListMoved[index0] == -1 and secondListMoved[index1] == -1:
			if firstListMoved[index0] == -1 or secondListMoved[index1] == -1:
				# The two points have already been merged.  Do nothing.
				pass
			else:
				# At least one of the points has not been merged.
				allPairings.append(location)
				firstListMoved[index0] = -1
				secondListMoved[index1] = -1
				print("Pairing:", location, " between points: ", s1[index0], s2[index1])
				# If either index already exists in a cluster
				if index0 in side0Cluster.keys():
					# Index already exists.  Get the
					existingCluster = side0Cluster[ index0 ]
				elif index1 in side1Cluster.keys():
					existingCluster = side1Cluster[ index1 ]
				else:
					# Create new cluster.
					existingCluster = currentCluster
					currentCluster += 1
				side0Cluster[ index0 ] = existingCluster
				side1Cluster[ index1 ] = existingCluster
				if not existingCluster in clusterGroups.keys():
					newList = [ (index0, index1) ]
					clusterGroups[ existingCluster ] = newList
				else:
					existingList = clusterGroups[ existingCluster ]
					existingList.append( (index0, index1) )

		print("** side0Cluster:", side0Cluster)
		print("** side1Cluster:", side1Cluster)
		print("** clusterGroups:", clusterGroups)


		print("** side0Cluster:", side0Cluster)
		print("** side1Cluster:", side1Cluster)
		print("** clusterGroups:", clusterGroups)
		self.side0Cluster = side0Cluster
		self.side1Cluster = side1Cluster
		self.clusterGroups = clusterGroups

		self.allPairs = allPairings

		self.averageClusters()
		self.displayAllPairs()
		plt.title('pairAllOR')

	def averageClusters(self):
		averagePoints = {}
		for cluster in self.clusterGroups.keys():
			averagePoint = np.array([0.0,0.0])
			values = []
			for indeces in self.clusterGroups[ cluster ]:
				averagePoint += np.array(self.s0[indeces[0]])
				averagePoint += np.array(self.s1[indeces[1]])
				values += indeces

			print("Values:", values)
			averagePoints[ cluster ] =  list( averagePoint / len( values ) )

		self.averagePoints = averagePoints
		print(">>> averagePoints:", self.averagePoints)


	def displayAllPairs( self ):
		plt.figure()

		for pair in self.allPairs:
			print("Pair:", pair)
			index0 = pair[0][0]
			index1 = pair[1][0]
			print("Index 0:", index0)
			print("Index 1:", index1)

			print("coordinates 1:", self.s0[index0])
			print("coordinates 2:", self.s1[index1])
			xValues = [self.s0[index0][0], self.s1[index1][0]]
			yValues = [self.s0[index0][1], self.s1[index1][1]]
			print("xValues:", xValues)
			print("yValues:", yValues)
			plt.plot(xValues, yValues)

		for point in self.s0:
			plt.plot(point[0], point[1], color='r', marker='o', markersize=5)

		for point in self.s1:
			plt.plot(point[0], point[1], color='g', marker='o', markersize=5)

		for point in self.averagePoints.values():
			plt.plot(point[0], point[1], color='b', marker='*', markersize=5)






if False:
	print("************************************")
	coords1 = np.array([[0, 0], [0,2],[0,5]])

	coords2 = np.array([[1, 0.5],[1,3] ])

	print("Coords1:", coords1)
	print("Coords2:", coords2)

	allPairs = pairClusters()
	allPairs.pairAll(coords1, coords2, allowDangle=True)
	allPairs.averageClusters()
	allPairs.displayAllPairs()

	allPairs = pairClusters()
	allPairs.pairAll(coords1, coords2, allowDangle=False)
	allPairs.averageClusters()
	allPairs.displayAllPairs()




if False:
	print("************************************")
	coords1 = np.array( [[0, 0],
	          [0,2],
	          [0,5]] )

	coords2 = np.array( [[1, 4],
	          [1,4.5]] )


	print("Coords1:", coords1)
	print("Coords2:", coords2)

	allPairs = pairClusters()
	allPairs.pairAll(coords1, coords2, allowDangle=True)
	allPairs.averageClusters()
	allPairs.displayAllPairs()

	allPairs = pairClusters()
	allPairs.pairAll(coords1, coords2, allowDangle=False)
	allPairs.averageClusters()
	allPairs.displayAllPairs()


if False:
	print("************************************")
	coords1 = np.array( [[0, 0],
	                    [0,2],
	                    [0,5]] )

	coords2 = np.array( [[1, 4],
	                    [1,4.5],
	                    [1, 2.2]] )


	print("Coords1:", coords1)
	print("Coords2:", coords2)

	allPairs = pairClusters()
	allPairs.pairAllAND(coords1, coords2, threshold=6)
	allPairs.pairAllOR(coords1, coords2)
	allPairs.pairAll(coords1, coords2, allowDangle=True)
	allPairs.pairAll(coords1, coords2, allowDangle=False)
	# allPairs.averageClusters()
	# allPairs.displayAllPairs()

	# allPairs = pairClusters()
	# allPairs.pairAll(coords1, coords2, allowDangle=False)
	# allPairs.averageClusters()
	# allPairs.displayAllPairs()



if True:
	print("************************************")
	coords1 = np.array( [[1-0.5, 0],
	                     [1 - 0.5, 0.5],
	                     [1 - 0.5, 1],
	                    [1-0.5,2],
	                     [1 - 0.5, 1.5],
	                    [0,5]] )

	coords2 = np.array( [[1+0.5, 0],
	                    [1+0.5,2],
	                    [2, 5]] )


	print("Coords1:", coords1)
	print("Coords2:", coords2)

	allPairs = pairClusters()
	allPairs.pairAllAND(coords1, coords2, threshold=2)
	# allPairs.pairAllOR(coords1, coords2)
	# allPairs.pairAll(coords1, coords2, allowDangle=True)
	# allPairs.pairAll(coords1, coords2, allowDangle=False)
	# allPairs.averageClusters()
	# allPairs.displayAllPairs()

	# allPairs = pairClusters()
	# allPairs.pairAll(coords1, coords2, allowDangle=False)
	# allPairs.averageClusters()
	# allPairs.displayAllPairs()


if False:
	print("************************************")
	coords1 = np.array( [[0, 0],
	          [0,2],
	          [0,5]] )

	coords2 = np.array( [[1, 0.1],
	          [1,0.5]] )

	print("Coords1:", coords1)
	print("Coords2:", coords2)

	allPairs = pairClusters()
	allPairs.pairAll(coords1, coords2, allowDangle=True)
	allPairs.averageClusters()
	allPairs.displayAllPairs()

	allPairs = pairClusters()
	allPairs.pairAll(coords1, coords2, allowDangle=False)
	allPairs.averageClusters()
	allPairs.displayAllPairs()

plt.show()



# jit_module(nopython=True, fastmath=True)

